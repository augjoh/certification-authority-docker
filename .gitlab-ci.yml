stages:
  - lint
  - build
  - test
  - release

variables:
  GIT_SUBMODULE_STRATEGY: normal
  HOSTNAME: nodejs.rz-bsd.my.corp
  FF_NETWORK_PER_BUILD: 1
  
container:
  image: centos:latest
  stage: build
  variables:
    STORAGE_DRIVER: vfs
  before_script:
    - dnf install -y buildah
    - buildah login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
  script:
    - buildah bud --isolation chroot -f Dockerfile -t "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}" .
    - buildah push "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
#  rules:
#    - changes:
#        - Dockerfile
#        - flows/

internal:
  image: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
  stage: test
  script:
    - unreached
  when: manual

downloads:
  image: debian:latest
  services:
    - name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
      alias: nodejs.rz-bsd.my.corp
  stage: test
  before_script:
    - apt-get update
    - apt-get install -y curl
  script:
    - curl -v http://${HOSTNAME}/
    - curl -v http://${HOSTNAME}/download/Root/ca.crt.pem

chain:
  image: debian:latest
  services:
    - name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
      alias: nodejs.rz-bsd.my.corp
  stage: test
  before_script:
    - apt-get update
    - apt-get install -y curl openssl
  script:
    - curl http://${HOSTNAME}/download/Root/ca.crt.pem > root.crt.pem
    - curl http://${HOSTNAME}/download/Sub/ca.crt.pem > sub.crt.pem
    - openssl verify -verbose -check_ss_sig -CAfile root.crt.pem sub.crt.pem

crls:
  image: debian:latest
  services:
    - name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
      alias: nodejs.rz-bsd.my.corp
  stage: test
  before_script:
    - apt-get update
    - apt-get install -y curl openssl
  script:
    - curl http://${HOSTNAME}/download/Root/ca.crt.pem > root.crt.pem
    - curl http://${HOSTNAME}/download/Root/crl.pem > root.crl.pem
    - openssl crl -CAfile root.crt.pem -noout -text -in root.crl.pem -verify
    - curl http://${HOSTNAME}/download/Sub/ca.crt.pem > sub.crt.pem
    - curl http://${HOSTNAME}/download/Sub/crl.pem > sub.crl.pem
    - openssl crl -CAfile sub.crt.pem -noout -text -in sub.crl.pem -verify
    - openssl verify -CAfile root.crt.pem -crl_download -crl_check sub.crt.pem
    
ocsp:
  image: debian:latest
  services:
    - name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
      alias: nodejs.rz-bsd.my.corp
  stage: test
  before_script:
    - apt-get update
    - apt-get install -y curl openssl
    - curl http://${HOSTNAME}/download/Root/ca.crt.pem > root.crt.pem
    - curl http://${HOSTNAME}/download/Sub/ca.crt.pem > sub.crt.pem
    - curl http://${HOSTNAME}/download/Sub/ocsp.crt.pem > ocsp.crt.pem
  script:
    - openssl ocsp -CAfile root.crt.pem -issuer sub.crt.pem -trust_other -cert ocsp.crt.pem -url http://${HOSTNAME}/ocsp/Sub/

https:
  image: debian:latest
  services:
    - name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
      alias: nodejs.rz-bsd.my.corp
  stage: test
  before_script:
    - apt-get update
    - apt-get install -y curl openssl
    - curl http://${HOSTNAME}/download/Root/ca.crt.pem > root.crt.pem
  script:
    - openssl s_client -showcerts -CAfile root.crt.pem -connect ${HOSTNAME}:443 </dev/null
    - openssl s_client -showcerts -connect ${HOSTNAME}:443 | openssl x509 -noout -text

websocket:
  image: debian:latest
  services:
    - name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
      alias: nodejs.rz-bsd.my.corp
  stage: test
  before_script:
    - apt-get update
    - apt-get install -y curl openssl
    - curl http://${HOSTNAME}/download/Root/ca.crt.pem > root.crt.pem
  script:
    - "echo 'I am groot' | curl --cacert root.crt.pem --location --include --no-buffer --header 'Connection: Upgrade' --header 'Upgrade: websocket' --header 'Host: ${HOSTNAME}' --header 'Origin: ${HOSTNAME}' --header 'Sec-WebSocket-Key: $(openssl rand 16 | openssl enc -base64)' --header 'Sec-WebSocket-Version: 13' https://${HOSTNAME}/admin/comms"
  when: manual

acme:
  image: debian:latest
  services:
    - name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
      alias: nodejs.rz-bsd.my.corp
  stage: test
  variables:
    CERTBOT_DIR: certbot
    CERTBOT_ARGS: "--config-dir=${CERTBOT_DIR}/etc/ --work-dir=${CERTBOT_DIR}/work/ --logs-dir=${CERTBOT_DIR}/log/ --server=https://${HOSTNAME}/acme/Sub/"
  before_script:
    - apt-get update
    - apt-get install -y certbot curl
    - curl http://${HOSTNAME}/download/Root/ca.crt.pem > root.crt.pem
    - curl http://${HOSTNAME}/download/Sub/ca.crt.pem > sub.crt.pem
  script:
    - export REQUESTS_CA_BUNDLE=$(pwd)/root.crt.pem
    - echo ${REQUESTS_CA_BUNDLE}
    - NAME=$(hostname -f)
    - echo ${NAME}
    - certbot register ${CERTBOT_ARGS} --no-eff-email --email=node@my.corp --agree-tos
    # - certbot certonly ${CERTBOT_ARGS} --standalone -d ${NAME}
    # - certbot revoke ${CERTBOT_ARGS} --no-delete-after-revoke --cert-path "${CERTBOT_DIR}/etc/live/${NAME}/cert.pem"
    # - openssl ocsp -CAfile root.crt.pem -issuer sub.crt.pem -trust_other -cert "${CERTBOT_DIR}/etc/live/${NAME}/cert.pem" -url http://${HOSTNAME}/ocsp/Sub/
  artifacts:
    when: on_failure
    paths:
      - ${CERTBOT_DIR}/log/

gitlab:
  image: centos:latest
  stage: release
  variables:
    STORAGE_DRIVER: vfs
  before_script:
    - dnf install -y buildah
    - buildah login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
  script:
    - buildah pull "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
    - buildah tag "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}" "$CI_REGISTRY_IMAGE:${CI_COMMIT_REF_SLUG/master/latest}"
    - buildah push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG/master/latest}"
    
heroku:
  image: centos:latest
  stage: release
  variables:
    STORAGE_DRIVER: vfs
    BUILDAH_FORMAT: docker
  before_script:
    - dnf install -y skopeo
  script:
    - "skopeo copy --src-creds='${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD}' '${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}' --dest-creds='_:${HEROKU_AUTH_TOKEN}' 'registry.heroku.com/platynum/web'"
  environment:
    name: heroku
    url: https://platynum.herokuapp.com/admin