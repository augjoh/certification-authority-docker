stages:
  - build
  - test
  - release

variables:
  GIT_SUBMODULE_STRATEGY: normal
  HOSTNAME: nodejs.rz-bsd.my.corp
  FF_NETWORK_PER_BUILD: 1
  INITIALIZATION_TIME: 180

include:
  - template: Security/SAST.gitlab-ci.yml
#  - template: Container-Scanning.gitlab-ci.yml

container:
  image: quay.io/buildah/stable
  stage: build
  variables:
    STORAGE_DRIVER: vfs
  before_script:
    - buildah login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
  script:
    - buildah bud --arch "${ARCH}" --format docker --isolation chroot -f Dockerfile --build-arg GIT_COMMIT="${CI_COMMIT_SHA}" -t "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}" -t "${CI_REGISTRY_IMAGE}/${ARCH}:${CI_PIPELINE_ID}" .
    - if [ "${ARCH}" == "amd64" ]; then buildah push "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"; fi
    - buildah push "${CI_REGISTRY_IMAGE}/${ARCH}:${CI_PIPELINE_ID}"
  parallel:
    matrix:
      - ARCH: ["amd64", "arm"]
#  rules:
#    - changes:
#        - Dockerfile
#        - flows/

internal:
  image: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
  stage: test
  script:
    - unreached
  when: manual

downloads:
  image: debian:latest
  services:
    - name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
      alias: nodejs.rz-bsd.my.corp
  stage: test
  before_script:
    - apt-get -q update
    - apt-get -q install -y curl
    - sleep ${INITIALIZATION_TIME}
  script:
    - curl -v http://${HOSTNAME}/
    - curl -v http://${HOSTNAME}/download/Root/ca.crt.pem

chain:
  image: debian:latest
  services:
    - name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
      alias: nodejs.rz-bsd.my.corp
  stage: test
  before_script:
    - apt-get -q update
    - apt-get -q install -y curl openssl
    - sleep ${INITIALIZATION_TIME}
  script:
    - curl http://${HOSTNAME}/download/Root/ca.crt.pem > root.crt.pem
    - openssl x509 -in root.crt.pem -noout -fingerprint -sha256
    - curl http://${HOSTNAME}/download/Sub/ca.crt.pem > sub.crt.pem
    - openssl verify -verbose -check_ss_sig -CAfile root.crt.pem sub.crt.pem

crls:
  image: debian:latest
  services:
    - name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
      alias: nodejs.rz-bsd.my.corp
  stage: test
  before_script:
    - apt-get -q update
    - apt-get -q install -y curl openssl
    - sleep ${INITIALIZATION_TIME}
  script:
    - curl http://${HOSTNAME}/download/Root/ca.crt.pem > root.crt.pem
    - curl http://${HOSTNAME}/download/Sub/ca.crt.pem > sub.crt.pem
    - "CRL_URI=$(openssl x509 -in sub.crt.pem -noout -text | grep -A3 'X509v3 CRL Distribution Points' | awk -FURI: '/URI:/ { print $2 }')"
    - echo CRL_URI=${CRL_URI}
    - curl -v ${CRL_URI} > root.crl.der
    - curl -v ${CRL_URI/.der/.pem} > root.crl.pem
    - openssl crl -CAfile root.crt.pem -noout -text -inform DER -in root.crl.der -verify
    - openssl verify -verbose -CAfile root.crt.pem -crl_download -crl_check sub.crt.pem
    # Check Sub-CA's CRL
    - openssl s_client -showcerts -connect ${HOSTNAME}:443 < /dev/null | openssl x509 > https.crt.pem
    - "CRL_URI=$(openssl x509 -in https.crt.pem -noout -text | grep -A3 'X509v3 CRL Distribution Points' | awk -FURI: '/URI:/ { print $2 }')"
    - echo CRL_URI=${CRL_URI}
    - curl -v ${CRL_URI} > sub.crl.der
    - openssl crl -CAfile sub.crt.pem -noout -text -inform DER -in sub.crl.der -verify
    - curl -v ${CRL_URI/.der/.pem} > sub.crl.pem
  artifacts:
    paths:
      - "*.crt.pem"
      - "*.crl.pem"
      - "*.crl.der"
    when: on_failure

ocsp:
  image: debian:latest
  services:
    - name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
      alias: nodejs.rz-bsd.my.corp
  stage: test
  before_script:
    - apt-get update
    - apt-get install -y curl openssl
    - sleep ${INITIALIZATION_TIME}
    - curl http://${HOSTNAME}/download/Root/ca.crt.pem > root.crt.pem
    - curl http://${HOSTNAME}/download/Sub/ca.crt.pem > sub.crt.pem
    - openssl s_client -CAfile root.crt.pem -showcerts -connect ${HOSTNAME}:443 < /dev/null | openssl x509 > https.crt.pem
    - openssl x509 -in https.crt.pem -noout -text
  script:
    - openssl ocsp -CAfile root.crt.pem -issuer sub.crt.pem -trust_other -cert https.crt.pem -url $(openssl x509 -in https.crt.pem -noout -ocsp_uri)

metrics:
  image: debian:latest
  services:
    - name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
      alias: nodejs.rz-bsd.my.corp
  stage: test
  before_script:
    - apt-get update
    - apt-get install -y curl prometheus
    - sleep ${INITIALIZATION_TIME}
    - curl http://${HOSTNAME}/download/Root/ca.crt.pem > root.crt.pem
  script:
    - curl -vv --cacert root.crt.pem -o metrics.prom https://${HOSTNAME}/metrics
    - cat metrics.prom | promtool check metrics

https:
  image: debian:bullseye
  variables:
    PHONE_OUT: "true"
    ADDITIONAL_CA_FILES: "root.crt.pem"
  services:
    - name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
      alias: nodejs.rz-bsd.my.corp
  stage: test
  before_script:
    - apt-get -q update
    - apt-get -q install -y curl openssl testssl.sh
    - sleep ${INITIALIZATION_TIME}
    - curl http://${HOSTNAME}/download/Root/ca.crt.pem > "${ADDITIONAL_CA_FILES}"
  script:
    - openssl s_client -cipher ECDHE-RSA-AES256-GCM-SHA384 -showcerts -CAfile "${ADDITIONAL_CA_FILES}" -servername "${HOSTNAME}" -connect ${HOSTNAME}:443 </dev/null || true
    - openssl s_client -cipher ECDHE-ECDSA-AES256-GCM-SHA384 -showcerts -CAfile "${ADDITIONAL_CA_FILES}" -servername "${HOSTNAME}" -connect ${HOSTNAME}:443 </dev/null
    - openssl s_client -showcerts -connect ${HOSTNAME}:443 | openssl x509 -noout -text
    - testssl --debug 2 https://${HOSTNAME}/ || echo "testssl exit code $?"

ui:
  image: debian:bullseye
  variables:
    ADMIN_CERTIFICATE: "true"
  services:
    - name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
      alias: nodejs.rz-bsd.my.corp
      entrypoint: ["/bin/sh", "-c", "mkdir /builds/Admin /builds/Sub /builds/Root && ln -s /builds/Admin /data/Admin && ln -s /builds/Sub /data/Sub && ln -s /builds/Root /data/Root && chown node-red /builds/Admin /builds/Sub /builds/Root && ls -l /builds/ /data/ && exec /usr/bin/entrypoint.sh"]
  stage: test
  before_script:
    - apt-get -q update
    - apt-get -q install -y curl openssl
    - sleep ${INITIALIZATION_TIME}
  script:
    - ls -lR /builds/{Admin,Root,Sub}
    - openssl x509 -noout -text -in /builds/Root/certificates/*/ca.crt.pem -nameopt multiline,show_type -certopt no_sigdump
    - openssl x509 -noout -text -in /builds/Admin/certificates/*/???*.crt.pem -nameopt multiline,show_type -certopt no_sigdump
    - echo curl -L -v --cacert /builds/Root/certificates/*/ca.crt.pem --key /builds/Admin/keys/*/???*.priv.key.pem --cert /builds/Admin/certificates/*/???*.crt.pem https://${HOSTNAME}/
    - curl -L -v --cacert /builds/Root/certificates/*/ca.crt.pem --key /builds/Admin/keys/*/???*.priv.key.pem --cert /builds/Admin/certificates/*/???*.crt.pem https://${HOSTNAME}/

websocket:
  image: debian:latest
  services:
    - name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
      alias: nodejs.rz-bsd.my.corp
  stage: test
  before_script:
    - apt-get -q update
    - apt-get -q install -y curl openssl
    - sleep ${INITIALIZATION_TIME}
    - curl http://${HOSTNAME}/download/Root/ca.crt.pem > root.crt.pem
  script:
    - "echo 'I am groot' | curl --cacert root.crt.pem --location --include --no-buffer --header 'Connection: Upgrade' --header 'Upgrade: websocket' --header 'Host: ${HOSTNAME}' --header 'Origin: ${HOSTNAME}' --header 'Sec-WebSocket-Key: $(openssl rand 16 | openssl enc -base64)' --header 'Sec-WebSocket-Version: 13' https://${HOSTNAME}/admin/comms"
  when: manual

audit:
  image:
    name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
    entrypoint: ["/bin/sh", "-c"]
  stage: test
  script:
    - pwd
    - cd /usr/src/node-red
    - ls -l
    - npm audit --production || (npm audit fix --production && false)
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'
      allow_failure: true
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

tsa:
  image: archlinux:latest
  services:
    - name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
      alias: nodejs.rz-bsd.my.corp
  stage: test
  before_script:
    - pacman --noconfirm -Syu
    - pacman --noconfirm -Sy openssl curl
    - sleep ${INITIALIZATION_TIME}
    - curl http://${HOSTNAME}/download/Root/ca.crt.pem > root.crt.pem
  script:
    - dd if=/dev/urandom of=data.bin bs=1 count=512
    - openssl ts -query -data data.bin -sha256 -cert -out tsq.der
    - "curl -H 'Content-Type: application/timestamp-query' --data-bin '@tsq.der' http://${HOSTNAME}/tsa/Root > tsr.der"
    - openssl ts -verify -in tsr.der -queryfile tsq.der -CAfile root.crt.pem

acme:
  image: debian:latest
  services:
    - name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
      alias: nodejs.rz-bsd.my.corp
  stage: test
  variables:
    CERTBOT_DIR: certbot
    CERTBOT_ARGS: "--config-dir=${CERTBOT_DIR}/etc/ --work-dir=${CERTBOT_DIR}/work/ --logs-dir=${CERTBOT_DIR}/log/ --server=https://${HOSTNAME}/acme/Sub/"
  before_script:
    - apt-get -q update
    - apt-get -q install -y certbot curl
    - sleep ${INITIALIZATION_TIME}
    - curl http://${HOSTNAME}/download/Root/ca.crt.pem > root.crt.pem
    - curl http://${HOSTNAME}/download/Sub/ca.crt.pem > sub.crt.pem
  script:
    - export REQUESTS_CA_BUNDLE=$(pwd)/root.crt.pem
    - echo ${REQUESTS_CA_BUNDLE}
    - NAME=$(hostname -f)
    - echo ${NAME}
    - certbot register ${CERTBOT_ARGS} --no-eff-email --email=node@my.corp --agree-tos
    # - certbot certonly ${CERTBOT_ARGS} --standalone -d ${NAME}
    # - certbot revoke ${CERTBOT_ARGS} --no-delete-after-revoke --cert-path "${CERTBOT_DIR}/etc/live/${NAME}/cert.pem"
    # - openssl ocsp -CAfile root.crt.pem -issuer sub.crt.pem -trust_other -cert "${CERTBOT_DIR}/etc/live/${NAME}/cert.pem" -url http://${HOSTNAME}/ocsp/Sub/
  artifacts:
    when: on_failure
    paths:
      - ${CERTBOT_DIR}/log/

gitlab:
  image: quay.io/buildah/stable
  stage: release
  variables:
    STORAGE_DRIVER: vfs
  before_script:
    - buildah login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
  script:
    - buildah manifest create list
    - buildah manifest add list "${CI_REGISTRY_IMAGE}/amd64:${CI_PIPELINE_ID}"
    - buildah manifest add list "${CI_REGISTRY_IMAGE}/arm:${CI_PIPELINE_ID}"
    - buildah manifest push --all list "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG/${CI_DEFAULT_BRANCH}/latest}"

heroku:
  image: quay.io/containers/skopeo
  resource_group: heroku
  stage: release
  script:
    - "echo copy from docker://${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID} to docker://registry.heroku.com/platynum/web"
    - "skopeo copy --src-creds=${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} --dest-creds=_:${HEROKU_AUTH_TOKEN} --format=v2s2 docker://${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID} docker://registry.heroku.com/platynum/web"
  environment:
    name: heroku
    url: https://acme.platynum.ch/admin
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH'
