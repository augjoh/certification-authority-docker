stages:
  - build
  - test
  - release

variables:
  GIT_SUBMODULE_STRATEGY: normal
  HOSTNAME: nodejs.rz-bsd.my.corp
  FF_NETWORK_PER_BUILD: 1

#include:
#  - template: Container-Scanning.gitlab-ci.yml

container:
  image: centos:latest
  stage: build
  variables:
    STORAGE_DRIVER: vfs
  before_script:
    - dnf install -y buildah
    - buildah login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
  script:
    - buildah bud --isolation chroot -f Dockerfile -t "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}" .
    - buildah push "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
#  rules:
#    - changes:
#        - Dockerfile
#        - flows/

internal:
  image: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
  stage: test
  script:
    - unreached
  when: manual

downloads:
  image: debian:latest
  services:
    - name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
      alias: nodejs.rz-bsd.my.corp
  stage: test
  before_script:
    - apt-get -q update
    - apt-get -q install -y curl
    - sleep 120
  script:
    - curl -v http://${HOSTNAME}/
    - curl -v http://${HOSTNAME}/download/Root/ca.crt.pem

chain:
  image: debian:latest
  services:
    - name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
      alias: nodejs.rz-bsd.my.corp
  stage: test
  before_script:
    - apt-get -q update
    - apt-get -q install -y curl openssl
    - sleep 120
  script:
    - curl http://${HOSTNAME}/download/Root/ca.crt.pem > root.crt.pem
    - openssl x509 -in root.crt.pem -noout -fingerprint -sha256
    - curl http://${HOSTNAME}/download/Sub/ca.crt.pem > sub.crt.pem
    - openssl verify -verbose -check_ss_sig -CAfile root.crt.pem sub.crt.pem

crls:
  image: debian:latest
  services:
    - name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
      alias: nodejs.rz-bsd.my.corp
  stage: test
  before_script:
    - apt-get -q update
    - apt-get -q install -y curl openssl
    - sleep 120
  script:
    - curl http://${HOSTNAME}/download/Root/ca.crt.pem > root.crt.pem
    - curl http://${HOSTNAME}/download/Sub/ca.crt.pem > sub.crt.pem
    - CRL_URI=$(openssl x509 -in sub.crt.pem -noout -text | grep -A3 "X509v3 CRL Distribution Points" | tail -n1 | sed 's/URI://')
    - echo CRL_URI=${CRL_URI}
    - curl ${CRL_URI} > root.crl.der
    - openssl crl -CAfile root.crt.pem -noout -text -inform DER -in root.crl.der -verify
    - openssl verify -CAfile root.crt.pem -crl_download -crl_check sub.crt.pem

ocsp:
  image: debian:latest
  services:
    - name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
      alias: nodejs.rz-bsd.my.corp
  stage: test
  before_script:
    - apt-get update
    - apt-get install -y curl openssl
    - sleep 120
    - curl http://${HOSTNAME}/download/Root/ca.crt.pem > root.crt.pem
    - curl http://${HOSTNAME}/download/Sub/ca.crt.pem > sub.crt.pem
    - openssl s_client -showcerts -connect ${HOSTNAME}:443 < /dev/null | openssl x509 > https.crt.pem
    - openssl x509 -in https.crt.pem -noout -text
  script:
    - openssl ocsp -CAfile root.crt.pem -issuer sub.crt.pem -trust_other -cert https.crt.pem -url $(openssl x509 -in https.crt.pem -noout -ocsp_uri)

metrics:
  image: debian:latest
  services:
    - name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
      alias: nodejs.rz-bsd.my.corp
  stage: test
  before_script:
    - apt-get update
    - apt-get install -y curl prometheus
    - sleep 120
    - curl http://${HOSTNAME}/download/Root/ca.crt.pem > root.crt.pem
  script:
    - curl -vv --cacert root.crt.pem -o metrics.prom https://${HOSTNAME}/metrics
    - cat metrics.prom | promtool check metrics

https:
  image: debian:latest
  variables:
    PHONE_OUT: "true"
    ADDITIONAL_CA_FILES: "root.crt.pem"
  services:
    - name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
      alias: nodejs.rz-bsd.my.corp
  stage: test
  before_script:
    - apt-get -q update
    - apt-get -q install -y curl openssl testssl.sh
    - sleep 120
    - curl http://${HOSTNAME}/download/Root/ca.crt.pem > "${ADDITIONAL_CA_FILES}"
  script:
    - openssl s_client -showcerts -CAfile "${ADDITIONAL_CA_FILES}" -connect ${HOSTNAME}:443 </dev/null
    - openssl s_client -showcerts -connect ${HOSTNAME}:443 | openssl x509 -noout -text
    - testssl https://${HOSTNAME}/

websocket:
  image: debian:latest
  services:
    - name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
      alias: nodejs.rz-bsd.my.corp
  stage: test
  before_script:
    - apt-get -q update
    - apt-get -q install -y curl openssl
    - sleep 120
    - curl http://${HOSTNAME}/download/Root/ca.crt.pem > root.crt.pem
  script:
    - "echo 'I am groot' | curl --cacert root.crt.pem --location --include --no-buffer --header 'Connection: Upgrade' --header 'Upgrade: websocket' --header 'Host: ${HOSTNAME}' --header 'Origin: ${HOSTNAME}' --header 'Sec-WebSocket-Key: $(openssl rand 16 | openssl enc -base64)' --header 'Sec-WebSocket-Version: 13' https://${HOSTNAME}/admin/comms"
  when: manual

tsa:
  image: archlinux:latest
  services:
    - name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
      alias: nodejs.rz-bsd.my.corp
  stage: test
  before_script:
    - pacman --noconfirm -Syu
    - pacman --noconfirm -Sy openssl curl nodejs npm
    - sleep 120
    - curl http://${HOSTNAME}/download/Root/ca.crt.pem > root.crt.pem
  script:
    - dd if=/dev/urandom of=data.bin bs=1 count=512
    - openssl ts -query -data data.bin -sha256 -cert -out tsq.der
    - "curl -H 'Content-Type: application/timestamp-query' --data-bin '@tsq.der' http://${HOSTNAME}/tsa/Root > tsr.der"
    - openssl ts -verify -in tsr.der -queryfile tsq.der -CAfile root.crt.pem

acme:
  image: debian:latest
  services:
    - name: "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
      alias: nodejs.rz-bsd.my.corp
  stage: test
  variables:
    CERTBOT_DIR: certbot
    CERTBOT_ARGS: "--config-dir=${CERTBOT_DIR}/etc/ --work-dir=${CERTBOT_DIR}/work/ --logs-dir=${CERTBOT_DIR}/log/ --server=https://${HOSTNAME}/acme/Sub/"
  before_script:
    - apt-get -q update
    - apt-get -q install -y certbot curl
    - sleep 120
    - curl http://${HOSTNAME}/download/Root/ca.crt.pem > root.crt.pem
    - curl http://${HOSTNAME}/download/Sub/ca.crt.pem > sub.crt.pem
  script:
    - export REQUESTS_CA_BUNDLE=$(pwd)/root.crt.pem
    - echo ${REQUESTS_CA_BUNDLE}
    - NAME=$(hostname -f)
    - echo ${NAME}
    - certbot register ${CERTBOT_ARGS} --no-eff-email --email=node@my.corp --agree-tos
    # - certbot certonly ${CERTBOT_ARGS} --standalone -d ${NAME}
    # - certbot revoke ${CERTBOT_ARGS} --no-delete-after-revoke --cert-path "${CERTBOT_DIR}/etc/live/${NAME}/cert.pem"
    # - openssl ocsp -CAfile root.crt.pem -issuer sub.crt.pem -trust_other -cert "${CERTBOT_DIR}/etc/live/${NAME}/cert.pem" -url http://${HOSTNAME}/ocsp/Sub/
  artifacts:
    when: on_failure
    paths:
      - ${CERTBOT_DIR}/log/

gitlab:
  image: centos:latest
  stage: release
  variables:
    STORAGE_DRIVER: vfs
  before_script:
    - dnf install -y buildah
    - buildah login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
  script:
    - buildah pull "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}"
    - buildah tag "${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}" "$CI_REGISTRY_IMAGE:${CI_COMMIT_REF_SLUG/master/latest}"
    - buildah push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG/master/latest}"

heroku:
  image: centos:latest
  stage: release
  before_script:
    - dnf install -y skopeo
  script:
    - "echo copy from docker://${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID} to docker://registry.heroku.com/platynum/web"
    - "skopeo copy --src-creds=${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} --dest-creds=_:${HEROKU_AUTH_TOKEN} --format=v2s2 docker://${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID} docker://registry.heroku.com/platynum/web"
  environment:
    name: heroku
    url: https://acme.platynum.ch/admin
  only:
    - master
